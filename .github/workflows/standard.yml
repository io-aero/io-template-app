name: Standard

on:
  pull_request:
    branches: ['main']

env:
  IO_AWS_CLI: 'false'
  IO_COVERALLS: 'false'
  IO_DOCKER: 'false'
  IO_ODBC: 'false'
  IO_LOCAL: 'false'  # Defined IO_LOCAL here
  MODULE: 'iotemplateapp'
  PYPI_PAT: ${{ secrets.PYPI_PAT }}

jobs:
  standard:
    name: OS ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]

    steps:
      - name: Log the Operating System
        run: |
          echo "Running on OS: ${{ runner.os }}"

      - name: Show the environment variables
        run: |
          echo "IO_AWS_CLI  = ${{ env.IO_AWS_CLI }}"
          echo "IO_COVERALLS= ${{ env.IO_COVERALLS }}"
          echo "IO_DOCKER   = ${{ env.IO_DOCKER }}"
          echo "IO_LOCAL    = ${{ env.IO_LOCAL }}"
          echo "IO_ODBC     = ${{ env.IO_ODBC }}"
          echo "MODULE      = ${{ env.MODULE }}"

      - name: Verify PYPI_PAT is set
        run: |
          if [ -z "${{ secrets.PYPI_PAT }}" ]; then
            echo "PYPI_PAT is not set."
            exit 1
          else
            echo "PYPI_PAT is set."
          fi

      - name: Set Timezone
        run: echo "TZ=UTC" >> $GITHUB_ENV

      - name: Checking out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # no history, just HEAD

      - name: Set Locale
        run: |
          echo "SHELL_CONFIG=.bashrc" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y locales
          sudo locale-gen en_US.UTF-8
          sudo update-locale LANG=en_US.UTF-8

      - name: Preparing scripts
        run: |
          sudo apt-get update && sudo apt-get install -y dos2unix
          chmod +x scripts/run_prep_*.sh
          dos2unix scripts/run_prep_*.sh
          ./scripts/run_prep_bash_scripts.sh

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up AWS credentials
        if: ${{ env.IO_AWS_CLI == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Install AWS CLI
        if: ${{ env.IO_AWS_CLI == 'true' && env.IO_LOCAL == 'true' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          miniconda-version: "latest"
          python-version: ${{ matrix.python-version }}
          environment-file: config/environment_dev.yml  # Correct path
          activate-environment: dev         # Name of your environment
          cache-conda: true
          use-only-tar-bz2: true

      - name: Install Docker
        if: ${{ env.IO_DOCKER == 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: Install ODBC
        if: ${{ env.IO_ODBC == 'true' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y unixodbc-dev

      - name: Install dependencies - Conda - prod
        run: make conda-prod
        shell: bash -l {0 }

      - name: Compile the Python code - prod
        run: |
          set -x  # Enable debug mode
          source /root/miniconda3/etc/profile.d/conda.sh
          conda activate prod
          make compileall
        shell: bash -l {0 }

      - name: Run pytest - prod
        run: |
          set -x  # Enable debug mode
          source /root/miniconda3/etc/profile.d/conda.sh
          conda activate prod
          make pytest-ci
        shell: bash -l {0 }

      - name: Install dependencies - Conda - dev
        run: make conda-dev
        shell: bash -l {0 }

      - name: Run pytest - dev
        run: |
          set -x  # Enable debug mode
          source /root/miniconda3/etc/profile.d/conda.sh
          conda activate dev
          make black lint docs tests
        shell: bash -l {0 }

      - name: Coveralls
        if: ${{ env.IO_COVERALLS == 'true' }}
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage.lcov
          flag-name: run-${{ matrix.os }}-py${{ matrix.python-version }}
          parallel: false
          parallel-finished: true
